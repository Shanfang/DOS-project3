defmodule MatrixTest do
    use ExUnit.Case
    import Matrix
    test "should generate a routing table with map" do
        list  = 
        [
            List.duplicate("00000000", 4),
            List.duplicate("00000000", 4),
            List.duplicate("00000000", 4),
            List.duplicate("00000000", 4),
            List.duplicate("00000000", 4),
            List.duplicate("00000000", 4),
            List.duplicate("00000000", 4),
            List.duplicate("00000000", 4)
        ]
      assert Matrix.from_list(list) ==
        %{0 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
        3 => "00000000"},
        1 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
        3 => "00000000"},
        2 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
        3 => "00000000"},
        3 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
        3 => "00000000"},
        4 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
        3 => "00000000"},
        5 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
        3 => "00000000"},
        6 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
        3 => "00000000"},
        7 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
        3 => "00000000"}}
    end

    test "update the routing table should be successful" do 
        table =
            %{0 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
            3 => "00000000"},
            1 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
            3 => "00000000"},
            2 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
            3 => "00000000"},
            3 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
            3 => "00000000"},
            4 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
            3 => "00000000"},
            5 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
            3 => "00000000"},
            6 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
            3 => "00000000"},
            7 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
            3 => "00000000"}} 
            new_table = put_in(table[0][0], "11111111")      
        assert new_table == 
            %{0 => %{0 => "11111111", 1 => "00000000", 2 => "00000000",
            3 => "00000000"},
            1 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
                3 => "00000000"},
            2 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
                3 => "00000000"},
            3 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
                3 => "00000000"},
            4 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
                3 => "00000000"},
            5 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
                3 => "00000000"},
            6 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
                3 => "00000000"},
            7 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
                3 => "00000000"}}
    end

    test "pick a cell in the table" do
        table =
        %{0 => %{0 => "11111111", 1 => "00000000", 2 => "00000000",
        3 => "00000000"},
        1 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
            3 => "00000000"},
        2 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
            3 => "00000000"},
        3 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
            3 => "00000000"},
        4 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
            3 => "00000000"},
        5 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
            3 => "00000000"},
        6 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
            3 => "00000000"},
        7 => %{0 => "00000000", 1 => "00000000", 2 => "00000000",
            3 => "00000000"}}
        assert table[0][0] == "11111111"
    end
end